"use strict";function cov_2346mr839(){var path="/home/usuario/P6/src/ejercicio-2/list.ts";var hash="2ce53844e3ddd97003a0bab5770ebfde60d67907";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/usuario/P6/src/ejercicio-2/list.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:22}},"2":{start:{line:15,column:8},end:{line:15,column:49}},"3":{start:{line:23,column:8},end:{line:23,column:46}},"4":{start:{line:32,column:29},end:{line:32,column:53}},"5":{start:{line:33,column:8},end:{line:35,column:9}},"6":{start:{line:34,column:12},end:{line:34,column:38}},"7":{start:{line:36,column:8},end:{line:36,column:28}},"8":{start:{line:45,column:25},end:{line:45,column:35}},"9":{start:{line:46,column:8},end:{line:50,column:9}},"10":{start:{line:47,column:12},end:{line:49,column:13}},"11":{start:{line:48,column:16},end:{line:48,column:38}},"12":{start:{line:51,column:8},end:{line:51,column:24}},"13":{start:{line:59,column:8},end:{line:59,column:36}},"14":{start:{line:68,column:23},end:{line:68,column:33}},"15":{start:{line:69,column:8},end:{line:71,column:9}},"16":{start:{line:70,column:12},end:{line:70,column:43}},"17":{start:{line:72,column:8},end:{line:72,column:22}},"18":{start:{line:82,column:26},end:{line:82,column:44}},"19":{start:{line:83,column:8},end:{line:85,column:9}},"20":{start:{line:84,column:12},end:{line:84,column:56}},"21":{start:{line:86,column:8},end:{line:86,column:27}},"22":{start:{line:94,column:25},end:{line:94,column:35}},"23":{start:{line:95,column:8},end:{line:97,column:9}},"24":{start:{line:95,column:21},end:{line:95,column:38}},"25":{start:{line:96,column:12},end:{line:96,column:43}},"26":{start:{line:98,column:8},end:{line:98,column:24}},"27":{start:{line:101,column:8},end:{line:103,column:9}},"28":{start:{line:102,column:12},end:{line:102,column:31}},"29":{start:{line:106,column:8},end:{line:106,column:36}},"30":{start:{line:109,column:8},end:{line:109,column:37}},"31":{start:{line:112,column:0},end:{line:112,column:20}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:4},end:{line:14,column:5}},loc:{start:{line:14,column:26},end:{line:16,column:5}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:22,column:4},end:{line:22,column:5}},loc:{start:{line:22,column:17},end:{line:24,column:5}},line:22},"2":{name:"(anonymous_2)",decl:{start:{line:31,column:4},end:{line:31,column:5}},loc:{start:{line:31,column:26},end:{line:37,column:5}},line:31},"3":{name:"(anonymous_3)",decl:{start:{line:44,column:4},end:{line:44,column:5}},loc:{start:{line:44,column:22},end:{line:52,column:5}},line:44},"4":{name:"(anonymous_4)",decl:{start:{line:58,column:4},end:{line:58,column:5}},loc:{start:{line:58,column:13},end:{line:60,column:5}},line:58},"5":{name:"(anonymous_5)",decl:{start:{line:67,column:4},end:{line:67,column:5}},loc:{start:{line:67,column:19},end:{line:73,column:5}},line:67},"6":{name:"(anonymous_6)",decl:{start:{line:81,column:4},end:{line:81,column:5}},loc:{start:{line:81,column:40},end:{line:87,column:5}},line:81},"7":{name:"(anonymous_7)",decl:{start:{line:93,column:4},end:{line:93,column:5}},loc:{start:{line:93,column:14},end:{line:99,column:5}},line:93},"8":{name:"(anonymous_8)",decl:{start:{line:100,column:4},end:{line:100,column:5}},loc:{start:{line:100,column:23},end:{line:104,column:5}},line:100},"9":{name:"(anonymous_9)",decl:{start:{line:105,column:4},end:{line:105,column:5}},loc:{start:{line:105,column:17},end:{line:107,column:5}},line:105},"10":{name:"(anonymous_10)",decl:{start:{line:108,column:4},end:{line:108,column:5}},loc:{start:{line:108,column:14},end:{line:110,column:5}},line:108}},branchMap:{"0":{loc:{start:{line:15,column:24},end:{line:15,column:48}},type:"cond-expr",locations:[{start:{line:15,column:35},end:{line:15,column:43}},{start:{line:15,column:46},end:{line:15,column:48}}],line:15},"1":{loc:{start:{line:47,column:12},end:{line:49,column:13}},type:"if",locations:[{start:{line:47,column:12},end:{line:49,column:13}},{start:{line:47,column:12},end:{line:49,column:13}}],line:47}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,file:"/home/usuario/P6/src/ejercicio-2/list.ts",sources:["/home/usuario/P6/src/ejercicio-2/list.ts"],names:[],mappings:";;;AAAA;;GAEG;AACH,MAAa,IAAI;IACP,QAAQ,CAAM;IACtB;;;;OAIG;IACH,YAAY,QAAc;QACxB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3C,CAAC;IACD;;;;OAIG;IACI,MAAM,CAAC,IAAa;QACzB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACxC,CAAC;IACD;;;;;OAKG;IACI,WAAW,CAAC,GAAG,KAAgB;QACpC,MAAM,YAAY,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAC9C,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAC3B;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;IACD;;;;;OAKG;IACI,MAAM,CAAC,SAAkC;QAC9C,MAAM,QAAQ,GAAG,IAAI,IAAI,EAAK,CAAC;QAC/B,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnC,IAAI,SAAS,CAAC,OAAO,CAAC,EAAE;gBACtB,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aACvB;SACF;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACI,MAAM;QACX,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;IAC9B,CAAC;IACD;;;;;OAKG;IACI,GAAG,CAAI,SAA4B;QACxC,MAAM,MAAM,GAAG,IAAI,IAAI,EAAK,CAAC;QAC7B,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;SAChC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IACD;;;;;;OAMG;IACI,MAAM,CACX,OAA0C,EAC1C,kBAAqB;QAErB,IAAI,WAAW,GAAG,kBAAkB,CAAC;QACrC,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnC,WAAW,GAAG,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;SAC7C;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACI,OAAO;QACZ,MAAM,QAAQ,GAAG,IAAI,IAAI,EAAK,CAAC;QAC/B,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YAC3C,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SAChC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEM,OAAO,CAAC,SAA+B;QAC5C,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnC,SAAS,CAAC,OAAO,CAAC,CAAC;SACpB;IACH,CAAC;IAEM,GAAG,CAAC,OAAU;QACnB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IAC/B,CAAC;CACF;AAhHD,oBAgHC",sourcesContent:["/**\n * List is a generic class that represents a collection of elements of type T.\n */\nexport class List<T> {\n  private elements: T[];\n  /**\n   * Creates a new List object.\n   *\n   * @param elements An array of elements to initialize the list. If not provided, the list will be empty.\n   */\n  constructor(elements?: T[]) {\n    this.elements = elements ? elements : [];\n  }\n  /**\n   * Appends the elements of the given list to the end of this list.\n   *\n   * @param list The list whose elements should be appended to this list.\n   */\n  public append(list: List<T>): void {\n    this.elements.push(...list.toArray());\n  }\n  /**\n   * Concatenates the elements of this list with the elements of the given lists, returning a new list containing all the elements.\n   *\n   * @param lists The lists to concatenate with this list.\n   * @returns A new List object containing all the elements of this list and the given lists.\n   */\n  public concatenate(...lists: List<T>[]): List<T> {\n    const concatenated = new List(this.toArray());\n    for (const list of lists) {\n      concatenated.append(list);\n    }\n    return concatenated;\n  }\n  /**\n   * Returns a new list containing the elements of this list that satisfy the given predicate.\n   *\n   * @param predicate A function that returns true for elements that should be included in the filtered list.\n   * @returns A new List object containing the elements that satisfy the predicate.\n   */\n  public filter(predicate: (element: T) => boolean): List<T> {\n    const filtered = new List<T>();\n    for (const element of this.elements) {\n      if (predicate(element)) {\n        filtered.add(element);\n      }\n    }\n    return filtered;\n  }\n\n  /**\n   * Returns the number of elements in the list.\n   *\n   * @returns The number of elements in the list.\n   */\n  public length(): number {\n    return this.elements.length;\n  }\n  /**\n   * Returns a new list containing the result of applying the given transform function to each element in this list.\n   *\n   * @param transform A function that maps elements of type T to elements of type U.\n   * @returns A new List object containing the transformed elements.\n   */\n  public map<U>(transform: (element: T) => U): List<U> {\n    const mapped = new List<U>();\n    for (const element of this.elements) {\n      mapped.add(transform(element));\n    }\n    return mapped;\n  }\n  /**\n   * Applies the given reducer function to each element in the list to reduce the list to a single value.\n   *\n   * @param reducer A function that takes an accumulator of type U and an element of type T and returns a new accumulator.\n   * @param initialAccumulator The initial value of the accumulator.\n   * @returns The final value of the accumulator after applying the reducer to all elements of the list.\n   */\n  public reduce<U>(\n    reducer: (accumulator: U, current: T) => U,\n    initialAccumulator: U\n  ): U {\n    let accumulator = initialAccumulator;\n    for (const element of this.elements) {\n      accumulator = reducer(accumulator, element);\n    }\n    return accumulator;\n  }\n\n  /**\n   * Returns a new list containing the elements of this list in reverse order.\n   *\n   * @returns A new List object containing the reversed elements.\n   */\n  public reverse(): List<T> {\n    const reversed = new List<T>();\n    for (let i = this.length() - 1; i >= 0; i--) {\n      reversed.add(this.elements[i]);\n    }\n    return reversed;\n  }\n\n  public forEach(operation: (element: T) => void): void {\n    for (const element of this.elements) {\n      operation(element);\n    }\n  }\n\n  public add(element: T): void {\n    this.elements.push(element);\n  }\n\n  public toArray(): T[] {\n    return this.elements.slice();\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"2ce53844e3ddd97003a0bab5770ebfde60d67907"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2346mr839=function(){return actualCoverage;};}return actualCoverage;}cov_2346mr839();cov_2346mr839().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2346mr839().s[1]++;exports.List=void 0;/**
 * List is a generic class that represents a collection of elements of type T.
 */class List{elements;/**
     * Creates a new List object.
     *
     * @param elements An array of elements to initialize the list. If not provided, the list will be empty.
     */constructor(elements){cov_2346mr839().f[0]++;cov_2346mr839().s[2]++;this.elements=elements?(cov_2346mr839().b[0][0]++,elements):(cov_2346mr839().b[0][1]++,[]);}/**
     * Appends the elements of the given list to the end of this list.
     *
     * @param list The list whose elements should be appended to this list.
     */append(list){cov_2346mr839().f[1]++;cov_2346mr839().s[3]++;this.elements.push(...list.toArray());}/**
     * Concatenates the elements of this list with the elements of the given lists, returning a new list containing all the elements.
     *
     * @param lists The lists to concatenate with this list.
     * @returns A new List object containing all the elements of this list and the given lists.
     */concatenate(...lists){cov_2346mr839().f[2]++;const concatenated=(cov_2346mr839().s[4]++,new List(this.toArray()));cov_2346mr839().s[5]++;for(const list of lists){cov_2346mr839().s[6]++;concatenated.append(list);}cov_2346mr839().s[7]++;return concatenated;}/**
     * Returns a new list containing the elements of this list that satisfy the given predicate.
     *
     * @param predicate A function that returns true for elements that should be included in the filtered list.
     * @returns A new List object containing the elements that satisfy the predicate.
     */filter(predicate){cov_2346mr839().f[3]++;const filtered=(cov_2346mr839().s[8]++,new List());cov_2346mr839().s[9]++;for(const element of this.elements){cov_2346mr839().s[10]++;if(predicate(element)){cov_2346mr839().b[1][0]++;cov_2346mr839().s[11]++;filtered.add(element);}else{cov_2346mr839().b[1][1]++;}}cov_2346mr839().s[12]++;return filtered;}/**
     * Returns the number of elements in the list.
     *
     * @returns The number of elements in the list.
     */length(){cov_2346mr839().f[4]++;cov_2346mr839().s[13]++;return this.elements.length;}/**
     * Returns a new list containing the result of applying the given transform function to each element in this list.
     *
     * @param transform A function that maps elements of type T to elements of type U.
     * @returns A new List object containing the transformed elements.
     */map(transform){cov_2346mr839().f[5]++;const mapped=(cov_2346mr839().s[14]++,new List());cov_2346mr839().s[15]++;for(const element of this.elements){cov_2346mr839().s[16]++;mapped.add(transform(element));}cov_2346mr839().s[17]++;return mapped;}/**
     * Applies the given reducer function to each element in the list to reduce the list to a single value.
     *
     * @param reducer A function that takes an accumulator of type U and an element of type T and returns a new accumulator.
     * @param initialAccumulator The initial value of the accumulator.
     * @returns The final value of the accumulator after applying the reducer to all elements of the list.
     */reduce(reducer,initialAccumulator){cov_2346mr839().f[6]++;let accumulator=(cov_2346mr839().s[18]++,initialAccumulator);cov_2346mr839().s[19]++;for(const element of this.elements){cov_2346mr839().s[20]++;accumulator=reducer(accumulator,element);}cov_2346mr839().s[21]++;return accumulator;}/**
     * Returns a new list containing the elements of this list in reverse order.
     *
     * @returns A new List object containing the reversed elements.
     */reverse(){cov_2346mr839().f[7]++;const reversed=(cov_2346mr839().s[22]++,new List());cov_2346mr839().s[23]++;for(let i=(cov_2346mr839().s[24]++,this.length()-1);i>=0;i--){cov_2346mr839().s[25]++;reversed.add(this.elements[i]);}cov_2346mr839().s[26]++;return reversed;}forEach(operation){cov_2346mr839().f[8]++;cov_2346mr839().s[27]++;for(const element of this.elements){cov_2346mr839().s[28]++;operation(element);}}add(element){cov_2346mr839().f[9]++;cov_2346mr839().s[29]++;this.elements.push(element);}toArray(){cov_2346mr839().f[10]++;cov_2346mr839().s[30]++;return this.elements.slice();}}cov_2346mr839().s[31]++;exports.List=List;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvdXN1YXJpby9QNi9zcmMvZWplcmNpY2lvLTIvbGlzdC50cyIsInNvdXJjZXMiOlsiL2hvbWUvdXN1YXJpby9QNi9zcmMvZWplcmNpY2lvLTIvbGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7R0FFRztBQUNILE1BQWEsSUFBSTtJQUNQLFFBQVEsQ0FBTTtJQUN0Qjs7OztPQUlHO0lBQ0gsWUFBWSxRQUFjO1FBQ3hCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxJQUFhO1FBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUNEOzs7OztPQUtHO0lBQ0ksV0FBVyxDQUFDLEdBQUcsS0FBZ0I7UUFDcEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDOUMsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7WUFDeEIsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzQjtRQUNELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFDRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxTQUFrQztRQUM5QyxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksRUFBSyxDQUFDO1FBQy9CLEtBQUssTUFBTSxPQUFPLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNuQyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDdEIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUN2QjtTQUNGO1FBQ0QsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxNQUFNO1FBQ1gsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUM5QixDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFDSSxHQUFHLENBQUksU0FBNEI7UUFDeEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUssQ0FBQztRQUM3QixLQUFLLE1BQU0sT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbkMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUNoQztRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFDRDs7Ozs7O09BTUc7SUFDSSxNQUFNLENBQ1gsT0FBMEMsRUFDMUMsa0JBQXFCO1FBRXJCLElBQUksV0FBVyxHQUFHLGtCQUFrQixDQUFDO1FBQ3JDLEtBQUssTUFBTSxPQUFPLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNuQyxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM3QztRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksT0FBTztRQUNaLE1BQU0sUUFBUSxHQUFHLElBQUksSUFBSSxFQUFLLENBQUM7UUFDL0IsS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDM0MsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDaEM7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRU0sT0FBTyxDQUFDLFNBQStCO1FBQzVDLEtBQUssTUFBTSxPQUFPLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNuQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRU0sR0FBRyxDQUFDLE9BQVU7UUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVNLE9BQU87UUFDWixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDL0IsQ0FBQztDQUNGO0FBaEhELG9CQWdIQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGlzdCBpcyBhIGdlbmVyaWMgY2xhc3MgdGhhdCByZXByZXNlbnRzIGEgY29sbGVjdGlvbiBvZiBlbGVtZW50cyBvZiB0eXBlIFQuXG4gKi9cbmV4cG9ydCBjbGFzcyBMaXN0PFQ+IHtcbiAgcHJpdmF0ZSBlbGVtZW50czogVFtdO1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBMaXN0IG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIGVsZW1lbnRzIEFuIGFycmF5IG9mIGVsZW1lbnRzIHRvIGluaXRpYWxpemUgdGhlIGxpc3QuIElmIG5vdCBwcm92aWRlZCwgdGhlIGxpc3Qgd2lsbCBiZSBlbXB0eS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRzPzogVFtdKSB7XG4gICAgdGhpcy5lbGVtZW50cyA9IGVsZW1lbnRzID8gZWxlbWVudHMgOiBbXTtcbiAgfVxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGxpc3QgdG8gdGhlIGVuZCBvZiB0aGlzIGxpc3QuXG4gICAqXG4gICAqIEBwYXJhbSBsaXN0IFRoZSBsaXN0IHdob3NlIGVsZW1lbnRzIHNob3VsZCBiZSBhcHBlbmRlZCB0byB0aGlzIGxpc3QuXG4gICAqL1xuICBwdWJsaWMgYXBwZW5kKGxpc3Q6IExpc3Q8VD4pOiB2b2lkIHtcbiAgICB0aGlzLmVsZW1lbnRzLnB1c2goLi4ubGlzdC50b0FycmF5KCkpO1xuICB9XG4gIC8qKlxuICAgKiBDb25jYXRlbmF0ZXMgdGhlIGVsZW1lbnRzIG9mIHRoaXMgbGlzdCB3aXRoIHRoZSBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gbGlzdHMsIHJldHVybmluZyBhIG5ldyBsaXN0IGNvbnRhaW5pbmcgYWxsIHRoZSBlbGVtZW50cy5cbiAgICpcbiAgICogQHBhcmFtIGxpc3RzIFRoZSBsaXN0cyB0byBjb25jYXRlbmF0ZSB3aXRoIHRoaXMgbGlzdC5cbiAgICogQHJldHVybnMgQSBuZXcgTGlzdCBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGVsZW1lbnRzIG9mIHRoaXMgbGlzdCBhbmQgdGhlIGdpdmVuIGxpc3RzLlxuICAgKi9cbiAgcHVibGljIGNvbmNhdGVuYXRlKC4uLmxpc3RzOiBMaXN0PFQ+W10pOiBMaXN0PFQ+IHtcbiAgICBjb25zdCBjb25jYXRlbmF0ZWQgPSBuZXcgTGlzdCh0aGlzLnRvQXJyYXkoKSk7XG4gICAgZm9yIChjb25zdCBsaXN0IG9mIGxpc3RzKSB7XG4gICAgICBjb25jYXRlbmF0ZWQuYXBwZW5kKGxpc3QpO1xuICAgIH1cbiAgICByZXR1cm4gY29uY2F0ZW5hdGVkO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IGxpc3QgY29udGFpbmluZyB0aGUgZWxlbWVudHMgb2YgdGhpcyBsaXN0IHRoYXQgc2F0aXNmeSB0aGUgZ2l2ZW4gcHJlZGljYXRlLlxuICAgKlxuICAgKiBAcGFyYW0gcHJlZGljYXRlIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRydWUgZm9yIGVsZW1lbnRzIHRoYXQgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHRoZSBmaWx0ZXJlZCBsaXN0LlxuICAgKiBAcmV0dXJucyBBIG5ldyBMaXN0IG9iamVjdCBjb250YWluaW5nIHRoZSBlbGVtZW50cyB0aGF0IHNhdGlzZnkgdGhlIHByZWRpY2F0ZS5cbiAgICovXG4gIHB1YmxpYyBmaWx0ZXIocHJlZGljYXRlOiAoZWxlbWVudDogVCkgPT4gYm9vbGVhbik6IExpc3Q8VD4ge1xuICAgIGNvbnN0IGZpbHRlcmVkID0gbmV3IExpc3Q8VD4oKTtcbiAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgdGhpcy5lbGVtZW50cykge1xuICAgICAgaWYgKHByZWRpY2F0ZShlbGVtZW50KSkge1xuICAgICAgICBmaWx0ZXJlZC5hZGQoZWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIGxpc3QuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIGxpc3QuXG4gICAqL1xuICBwdWJsaWMgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHMubGVuZ3RoO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IGxpc3QgY29udGFpbmluZyB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIHRoZSBnaXZlbiB0cmFuc2Zvcm0gZnVuY3Rpb24gdG8gZWFjaCBlbGVtZW50IGluIHRoaXMgbGlzdC5cbiAgICpcbiAgICogQHBhcmFtIHRyYW5zZm9ybSBBIGZ1bmN0aW9uIHRoYXQgbWFwcyBlbGVtZW50cyBvZiB0eXBlIFQgdG8gZWxlbWVudHMgb2YgdHlwZSBVLlxuICAgKiBAcmV0dXJucyBBIG5ldyBMaXN0IG9iamVjdCBjb250YWluaW5nIHRoZSB0cmFuc2Zvcm1lZCBlbGVtZW50cy5cbiAgICovXG4gIHB1YmxpYyBtYXA8VT4odHJhbnNmb3JtOiAoZWxlbWVudDogVCkgPT4gVSk6IExpc3Q8VT4ge1xuICAgIGNvbnN0IG1hcHBlZCA9IG5ldyBMaXN0PFU+KCk7XG4gICAgZm9yIChjb25zdCBlbGVtZW50IG9mIHRoaXMuZWxlbWVudHMpIHtcbiAgICAgIG1hcHBlZC5hZGQodHJhbnNmb3JtKGVsZW1lbnQpKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcHBlZDtcbiAgfVxuICAvKipcbiAgICogQXBwbGllcyB0aGUgZ2l2ZW4gcmVkdWNlciBmdW5jdGlvbiB0byBlYWNoIGVsZW1lbnQgaW4gdGhlIGxpc3QgdG8gcmVkdWNlIHRoZSBsaXN0IHRvIGEgc2luZ2xlIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYW4gYWNjdW11bGF0b3Igb2YgdHlwZSBVIGFuZCBhbiBlbGVtZW50IG9mIHR5cGUgVCBhbmQgcmV0dXJucyBhIG5ldyBhY2N1bXVsYXRvci5cbiAgICogQHBhcmFtIGluaXRpYWxBY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZSBvZiB0aGUgYWNjdW11bGF0b3IuXG4gICAqIEByZXR1cm5zIFRoZSBmaW5hbCB2YWx1ZSBvZiB0aGUgYWNjdW11bGF0b3IgYWZ0ZXIgYXBwbHlpbmcgdGhlIHJlZHVjZXIgdG8gYWxsIGVsZW1lbnRzIG9mIHRoZSBsaXN0LlxuICAgKi9cbiAgcHVibGljIHJlZHVjZTxVPihcbiAgICByZWR1Y2VyOiAoYWNjdW11bGF0b3I6IFUsIGN1cnJlbnQ6IFQpID0+IFUsXG4gICAgaW5pdGlhbEFjY3VtdWxhdG9yOiBVXG4gICk6IFUge1xuICAgIGxldCBhY2N1bXVsYXRvciA9IGluaXRpYWxBY2N1bXVsYXRvcjtcbiAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgdGhpcy5lbGVtZW50cykge1xuICAgICAgYWNjdW11bGF0b3IgPSByZWR1Y2VyKGFjY3VtdWxhdG9yLCBlbGVtZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgbGlzdCBjb250YWluaW5nIHRoZSBlbGVtZW50cyBvZiB0aGlzIGxpc3QgaW4gcmV2ZXJzZSBvcmRlci5cbiAgICpcbiAgICogQHJldHVybnMgQSBuZXcgTGlzdCBvYmplY3QgY29udGFpbmluZyB0aGUgcmV2ZXJzZWQgZWxlbWVudHMuXG4gICAqL1xuICBwdWJsaWMgcmV2ZXJzZSgpOiBMaXN0PFQ+IHtcbiAgICBjb25zdCByZXZlcnNlZCA9IG5ldyBMaXN0PFQ+KCk7XG4gICAgZm9yIChsZXQgaSA9IHRoaXMubGVuZ3RoKCkgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgcmV2ZXJzZWQuYWRkKHRoaXMuZWxlbWVudHNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmV2ZXJzZWQ7XG4gIH1cblxuICBwdWJsaWMgZm9yRWFjaChvcGVyYXRpb246IChlbGVtZW50OiBUKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBlbGVtZW50IG9mIHRoaXMuZWxlbWVudHMpIHtcbiAgICAgIG9wZXJhdGlvbihlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYWRkKGVsZW1lbnQ6IFQpOiB2b2lkIHtcbiAgICB0aGlzLmVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG4gIH1cblxuICBwdWJsaWMgdG9BcnJheSgpOiBUW10ge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzLnNsaWNlKCk7XG4gIH1cbn1cbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,