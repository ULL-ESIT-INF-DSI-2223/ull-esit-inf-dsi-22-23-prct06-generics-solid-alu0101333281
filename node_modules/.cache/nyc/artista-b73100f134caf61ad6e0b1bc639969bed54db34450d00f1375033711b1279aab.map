{"version":3,"file":"/home/usuario/P6/src/ejercicio-3/artista.ts","sources":["/home/usuario/P6/src/ejercicio-3/artista.ts"],"names":[],"mappings":"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","sourcesContent":["import { ICancion, ISingle, IDisco, IArtista } from \"./interfaces\";\n\n/**\n\nClase abstracta que representa un artista musical.\n@template T - Tipo de elemento musical que el artista produce (puede ser una canción o un single)\n@implements IArtista\n*/\nexport abstract class Artista<T extends ICancion | ISingle>\n  implements IArtista<T>\n{\n  /**\n  \n  Constructor de la clase Artista.\n  @param nombre - Nombre del artista.\n  @param oyentesMensuales - Número de oyentes mensuales que tiene el artista.\n  @param discografia - Discografía del artista (lista de discos y/o singles que ha producido).\n  */\n  constructor(\n    public nombre: string,\n    public oyentesMensuales: number,\n    public discografia: IDisco<T>[]\n  ) {}\n  /**\n  \n  Método abstracto que devuelve el número de canciones en un disco del artista.\n  @abstract\n  @param discoNombre - Nombre del disco.\n  @returns Número de canciones en el disco.\n  */\n  abstract numCancionesEnDisco(discoNombre: string): number;\n  /**\n  \n  Método abstracto que devuelve la duración total de un disco del artista.\n  @abstract\n  @param discoNombre - Nombre del disco.\n  @returns Duración total del disco en segundos.\n  */\n  abstract duracionDisco(discoNombre: string): number;\n  /**\n  \n  Método abstracto que devuelve el número total de reproducciones de un disco del artista.\n  @abstract\n  @param discoNombre - Nombre del disco.\n  @returns Número total de reproducciones del disco.\n  */\n  abstract reproduccionesDisco(discoNombre: string): number;\n}\n\n/**\nClase que implementa la interfaz IArtista para representar un artista musical.\n@template T - Tipo de elemento musical que el artista produce (puede ser una canción o un single).\n@extends Artista\n*/\nexport class ArtistaImpl<T extends ICancion | ISingle> extends Artista<T> {\n  /**\n  Método que devuelve el número de canciones y singles en un disco del artista.\n  @param discoNombre - Nombre del disco.\n  @returns Número de canciones y singles en el disco.\n  @throws {Error} Si el artista no tiene un disco o single con el nombre especificado.\n  */\n  numCancionesEnDisco(discoNombre: string): number {\n    const disco = this.discografia.find((d) => d.nombre === discoNombre);\n    if (disco) {\n      return (\n        disco.canciones.length + (disco.singles ? disco.singles.length : 0)\n      );\n    } else {\n      throw new Error(\n        `El artista ${this.nombre} no tiene un disco o single llamado ${discoNombre}`\n      );\n    }\n  }\n  /**\n  Método que devuelve la duracion de disco.\n  @param discoNombre - Nombre del disco.\n  @returns Número de canciones y singles en el disco.\n  @throws {Error} Si el artista no tiene un disco o single con el nombre especificado.\n  */\n  duracionDisco(discoNombre: string): number {\n    const disco = this.discografia.find((d) => d.nombre === discoNombre);\n    if (disco) {\n      const duracionCanciones = disco.canciones.reduce(\n        (totalDuracion, cancion) => totalDuracion + cancion.duracion,\n        0\n      );\n      const duracionSingles = disco.singles\n        ? disco.singles.reduce((totalDuracion, single) => {\n            const duracionVersiones = single.versiones\n              ? single.versiones.reduce(\n                  (totalDuracion, version) => totalDuracion + version.duracion,\n                  0\n                )\n              : 0;\n            return totalDuracion + single.duracion + duracionVersiones;\n          }, 0)\n        : 0;\n      return duracionCanciones + duracionSingles;\n    } else {\n      throw new Error(\n        `El artista ${this.nombre} no tiene un disco o single llamado ${discoNombre}`\n      );\n    }\n  }\n  /**\n  Método que devuelve el número de reproducciones.\n  @param discoNombre - Nombre del disco.\n  @returns Número de canciones y singles en el disco.\n  @throws {Error} Si el artista no tiene un disco o single con el nombre especificado.\n  */\n  reproduccionesDisco(discoNombre: string): number {\n    const disco = this.discografia.find((d) => d.nombre === discoNombre);\n    if (disco) {\n      const reproduccionesCanciones = disco.canciones.reduce(\n        (totalReproducciones, cancion) =>\n          totalReproducciones + cancion.reproducciones,\n        0\n      );\n      const reproduccionesSingles = disco.singles\n        ? disco.singles.reduce((totalReproducciones, single) => {\n            const reproduccionesVersiones = single.versiones\n              ? single.versiones.reduce(\n                  (totalReproducciones, version) =>\n                    totalReproducciones + version.reproducciones,\n                  0\n                )\n              : 0;\n            return (\n              totalReproducciones +\n              single.reproducciones +\n              reproduccionesVersiones\n            );\n          }, 0)\n        : 0;\n      return reproduccionesCanciones + reproduccionesSingles;\n    } else {\n      throw new Error(\n        `El artista ${this.nombre} no tiene un disco o single llamado ${discoNombre}`\n      );\n    }\n  }\n}\n\n/**\n\nClase que representa un single musical.\n@implements ISingle\n*/\nexport class Single implements ISingle {\n  /** \nConstructor de la clase Single.\n@param nombre - Nombre del single.\n@param duracion - Duración del single en segundos.\n@param generos - Lista de géneros del single.\n@param reproducciones - Número de reproducciones del single.\n@param versiones - Lista de canciones que conforman el single.\n*/\n  constructor(\n    public nombre: string,\n    public duracion: number,\n    public generos: string[],\n    public reproducciones: number,\n    public versiones?: ICancion[]\n  ) {\n    this.versiones = versiones || [];\n  }\n  single: boolean;\n}\n"]}