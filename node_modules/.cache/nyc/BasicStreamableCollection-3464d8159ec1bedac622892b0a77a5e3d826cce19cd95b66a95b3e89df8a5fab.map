{"version":3,"file":"/home/usuario/P6/src/ejercicio-1/BasicStreamableCollection.ts","sources":["/home/usuario/P6/src/ejercicio-1/BasicStreamableCollection.ts"],"names":[],"mappings":";;;AAEA;;;GAGG;AACH,MAAsB,yBAAyB;IAC7C;;OAEG;IACO,KAAK,CAAM;IAErB;;;OAGG;IACH,YAAY,QAAa,EAAE;QACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,MAAM;QACJ,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;;OAGG;IACH,GAAG,CAAC,IAAO;QACT,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,IAAO;QACZ,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;YAChB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SAC7B;IACH,CAAC;CAsBF;AA7DD,8DA6DC","sourcesContent":["import { Streamable } from \"../ejercicio-1/interfaces\";\n\n/**\n * Represents a basic implementation of a streamable collection of items.\n * @typeparam T The type of items contained in the collection.\n */\nexport abstract class BasicStreamableCollection<T> implements Streamable<T> {\n  /**\n   * The list of items contained in the collection.\n   */\n  protected items: T[];\n\n  /**\n   * Creates a new instance of the `BasicStreamableCollection` class.\n   * @param items An array of items to initialize the collection with. Defaults to an empty array.\n   */\n  constructor(items: T[] = []) {\n    this.items = items;\n  }\n\n  /**\n   * Gets all the items in the collection.\n   * @returns An array containing all the items in the collection.\n   */\n  getAll(): T[] {\n    return this.items;\n  }\n\n  /**\n   * Adds an item to the collection.\n   * @param item The item to add to the collection.\n   */\n  add(item: T): void {\n    this.items.push(item);\n  }\n\n  /**\n   * Removes an item from the collection.\n   * @param item The item to remove from the collection.\n   */\n  remove(item: T): void {\n    const index = this.items.indexOf(item);\n    if (index !== -1) {\n      this.items.splice(index, 1);\n    }\n  }\n\n  /**\n   * Searches the collection for items published in a given year.\n   * @param year The year to search for.\n   * @returns An array containing all the items published in the given year.\n   */\n  abstract searchByYear(year: number): T[];\n\n  /**\n   * Searches the collection for items with a given name.\n   * @param name The name to search for.\n   * @returns An array containing all the items with the given name.\n   */\n  abstract searchByName(name: string): T[];\n\n  /**\n   * Searches the collection for items with a given genre.\n   * @param genre The genre to search for.\n   * @returns An array containing all the items with the given genre.\n   */\n  abstract searchByGenre(genre: string): T[];\n}\n"]}