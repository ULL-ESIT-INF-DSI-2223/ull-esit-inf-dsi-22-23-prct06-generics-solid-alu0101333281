"use strict";function cov_lgmz6dldj(){var path="/home/usuario/P6/src/ejercicio-1/BasicStreamableCollection.ts";var hash="dbeb47894bea4a7e799bad097069dfa3b4f2b237";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/usuario/P6/src/ejercicio-1/BasicStreamableCollection.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:43}},"2":{start:{line:18,column:8},end:{line:18,column:27}},"3":{start:{line:25,column:8},end:{line:25,column:26}},"4":{start:{line:32,column:8},end:{line:32,column:30}},"5":{start:{line:39,column:22},end:{line:39,column:46}},"6":{start:{line:40,column:8},end:{line:42,column:9}},"7":{start:{line:41,column:12},end:{line:41,column:40}},"8":{start:{line:45,column:0},end:{line:45,column:62}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:28},end:{line:19,column:5}},line:17},"1":{name:"(anonymous_1)",decl:{start:{line:24,column:4},end:{line:24,column:5}},loc:{start:{line:24,column:13},end:{line:26,column:5}},line:24},"2":{name:"(anonymous_2)",decl:{start:{line:31,column:4},end:{line:31,column:5}},loc:{start:{line:31,column:14},end:{line:33,column:5}},line:31},"3":{name:"(anonymous_3)",decl:{start:{line:38,column:4},end:{line:38,column:5}},loc:{start:{line:38,column:17},end:{line:43,column:5}},line:38}},branchMap:{"0":{loc:{start:{line:17,column:16},end:{line:17,column:26}},type:"default-arg",locations:[{start:{line:17,column:24},end:{line:17,column:26}}],line:17},"1":{loc:{start:{line:40,column:8},end:{line:42,column:9}},type:"if",locations:[{start:{line:40,column:8},end:{line:42,column:9}},{start:{line:40,column:8},end:{line:42,column:9}}],line:40}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0],"1":[0,0]},inputSourceMap:{version:3,file:"/home/usuario/P6/src/ejercicio-1/BasicStreamableCollection.ts",sources:["/home/usuario/P6/src/ejercicio-1/BasicStreamableCollection.ts"],names:[],mappings:";;;AAEA;;;GAGG;AACH,MAAsB,yBAAyB;IAC7C;;OAEG;IACO,KAAK,CAAM;IAErB;;;OAGG;IACH,YAAY,QAAa,EAAE;QACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,MAAM;QACJ,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;;OAGG;IACH,GAAG,CAAC,IAAO;QACT,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,IAAO;QACZ,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;YAChB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SAC7B;IACH,CAAC;CAsBF;AA7DD,8DA6DC",sourcesContent:["import { Streamable } from \"../ejercicio-1/interfaces\";\n\n/**\n * Represents a basic implementation of a streamable collection of items.\n * @typeparam T The type of items contained in the collection.\n */\nexport abstract class BasicStreamableCollection<T> implements Streamable<T> {\n  /**\n   * The list of items contained in the collection.\n   */\n  protected items: T[];\n\n  /**\n   * Creates a new instance of the `BasicStreamableCollection` class.\n   * @param items An array of items to initialize the collection with. Defaults to an empty array.\n   */\n  constructor(items: T[] = []) {\n    this.items = items;\n  }\n\n  /**\n   * Gets all the items in the collection.\n   * @returns An array containing all the items in the collection.\n   */\n  getAll(): T[] {\n    return this.items;\n  }\n\n  /**\n   * Adds an item to the collection.\n   * @param item The item to add to the collection.\n   */\n  add(item: T): void {\n    this.items.push(item);\n  }\n\n  /**\n   * Removes an item from the collection.\n   * @param item The item to remove from the collection.\n   */\n  remove(item: T): void {\n    const index = this.items.indexOf(item);\n    if (index !== -1) {\n      this.items.splice(index, 1);\n    }\n  }\n\n  /**\n   * Searches the collection for items published in a given year.\n   * @param year The year to search for.\n   * @returns An array containing all the items published in the given year.\n   */\n  abstract searchByYear(year: number): T[];\n\n  /**\n   * Searches the collection for items with a given name.\n   * @param name The name to search for.\n   * @returns An array containing all the items with the given name.\n   */\n  abstract searchByName(name: string): T[];\n\n  /**\n   * Searches the collection for items with a given genre.\n   * @param genre The genre to search for.\n   * @returns An array containing all the items with the given genre.\n   */\n  abstract searchByGenre(genre: string): T[];\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"dbeb47894bea4a7e799bad097069dfa3b4f2b237"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_lgmz6dldj=function(){return actualCoverage;};}return actualCoverage;}cov_lgmz6dldj();cov_lgmz6dldj().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_lgmz6dldj().s[1]++;exports.BasicStreamableCollection=void 0;/**
 * Represents a basic implementation of a streamable collection of items.
 * @typeparam T The type of items contained in the collection.
 */class BasicStreamableCollection{/**
     * The list of items contained in the collection.
     */items;/**
     * Creates a new instance of the `BasicStreamableCollection` class.
     * @param items An array of items to initialize the collection with. Defaults to an empty array.
     */constructor(items=(cov_lgmz6dldj().b[0][0]++,[])){cov_lgmz6dldj().f[0]++;cov_lgmz6dldj().s[2]++;this.items=items;}/**
     * Gets all the items in the collection.
     * @returns An array containing all the items in the collection.
     */getAll(){cov_lgmz6dldj().f[1]++;cov_lgmz6dldj().s[3]++;return this.items;}/**
     * Adds an item to the collection.
     * @param item The item to add to the collection.
     */add(item){cov_lgmz6dldj().f[2]++;cov_lgmz6dldj().s[4]++;this.items.push(item);}/**
     * Removes an item from the collection.
     * @param item The item to remove from the collection.
     */remove(item){cov_lgmz6dldj().f[3]++;const index=(cov_lgmz6dldj().s[5]++,this.items.indexOf(item));cov_lgmz6dldj().s[6]++;if(index!==-1){cov_lgmz6dldj().b[1][0]++;cov_lgmz6dldj().s[7]++;this.items.splice(index,1);}else{cov_lgmz6dldj().b[1][1]++;}}}cov_lgmz6dldj().s[8]++;exports.BasicStreamableCollection=BasicStreamableCollection;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvdXN1YXJpby9QNi9zcmMvZWplcmNpY2lvLTEvQmFzaWNTdHJlYW1hYmxlQ29sbGVjdGlvbi50cyIsInNvdXJjZXMiOlsiL2hvbWUvdXN1YXJpby9QNi9zcmMvZWplcmNpY2lvLTEvQmFzaWNTdHJlYW1hYmxlQ29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQTs7O0dBR0c7QUFDSCxNQUFzQix5QkFBeUI7SUFDN0M7O09BRUc7SUFDTyxLQUFLLENBQU07SUFFckI7OztPQUdHO0lBQ0gsWUFBWSxRQUFhLEVBQUU7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU07UUFDSixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILEdBQUcsQ0FBQyxJQUFPO1FBQ1QsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxJQUFPO1FBQ1osTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDaEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzdCO0lBQ0gsQ0FBQztDQXNCRjtBQTdERCw4REE2REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdHJlYW1hYmxlIH0gZnJvbSBcIi4uL2VqZXJjaWNpby0xL2ludGVyZmFjZXNcIjtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYmFzaWMgaW1wbGVtZW50YXRpb24gb2YgYSBzdHJlYW1hYmxlIGNvbGxlY3Rpb24gb2YgaXRlbXMuXG4gKiBAdHlwZXBhcmFtIFQgVGhlIHR5cGUgb2YgaXRlbXMgY29udGFpbmVkIGluIHRoZSBjb2xsZWN0aW9uLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzaWNTdHJlYW1hYmxlQ29sbGVjdGlvbjxUPiBpbXBsZW1lbnRzIFN0cmVhbWFibGU8VD4ge1xuICAvKipcbiAgICogVGhlIGxpc3Qgb2YgaXRlbXMgY29udGFpbmVkIGluIHRoZSBjb2xsZWN0aW9uLlxuICAgKi9cbiAgcHJvdGVjdGVkIGl0ZW1zOiBUW107XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGBCYXNpY1N0cmVhbWFibGVDb2xsZWN0aW9uYCBjbGFzcy5cbiAgICogQHBhcmFtIGl0ZW1zIEFuIGFycmF5IG9mIGl0ZW1zIHRvIGluaXRpYWxpemUgdGhlIGNvbGxlY3Rpb24gd2l0aC4gRGVmYXVsdHMgdG8gYW4gZW1wdHkgYXJyYXkuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihpdGVtczogVFtdID0gW10pIHtcbiAgICB0aGlzLml0ZW1zID0gaXRlbXM7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhbGwgdGhlIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uLlxuICAgKiBAcmV0dXJucyBBbiBhcnJheSBjb250YWluaW5nIGFsbCB0aGUgaXRlbXMgaW4gdGhlIGNvbGxlY3Rpb24uXG4gICAqL1xuICBnZXRBbGwoKTogVFtdIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIGl0ZW0gdG8gdGhlIGNvbGxlY3Rpb24uXG4gICAqIEBwYXJhbSBpdGVtIFRoZSBpdGVtIHRvIGFkZCB0byB0aGUgY29sbGVjdGlvbi5cbiAgICovXG4gIGFkZChpdGVtOiBUKTogdm9pZCB7XG4gICAgdGhpcy5pdGVtcy5wdXNoKGl0ZW0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYW4gaXRlbSBmcm9tIHRoZSBjb2xsZWN0aW9uLlxuICAgKiBAcGFyYW0gaXRlbSBUaGUgaXRlbSB0byByZW1vdmUgZnJvbSB0aGUgY29sbGVjdGlvbi5cbiAgICovXG4gIHJlbW92ZShpdGVtOiBUKTogdm9pZCB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLml0ZW1zLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5pdGVtcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZWFyY2hlcyB0aGUgY29sbGVjdGlvbiBmb3IgaXRlbXMgcHVibGlzaGVkIGluIGEgZ2l2ZW4geWVhci5cbiAgICogQHBhcmFtIHllYXIgVGhlIHllYXIgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMgQW4gYXJyYXkgY29udGFpbmluZyBhbGwgdGhlIGl0ZW1zIHB1Ymxpc2hlZCBpbiB0aGUgZ2l2ZW4geWVhci5cbiAgICovXG4gIGFic3RyYWN0IHNlYXJjaEJ5WWVhcih5ZWFyOiBudW1iZXIpOiBUW107XG5cbiAgLyoqXG4gICAqIFNlYXJjaGVzIHRoZSBjb2xsZWN0aW9uIGZvciBpdGVtcyB3aXRoIGEgZ2l2ZW4gbmFtZS5cbiAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMgQW4gYXJyYXkgY29udGFpbmluZyBhbGwgdGhlIGl0ZW1zIHdpdGggdGhlIGdpdmVuIG5hbWUuXG4gICAqL1xuICBhYnN0cmFjdCBzZWFyY2hCeU5hbWUobmFtZTogc3RyaW5nKTogVFtdO1xuXG4gIC8qKlxuICAgKiBTZWFyY2hlcyB0aGUgY29sbGVjdGlvbiBmb3IgaXRlbXMgd2l0aCBhIGdpdmVuIGdlbnJlLlxuICAgKiBAcGFyYW0gZ2VucmUgVGhlIGdlbnJlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIEFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIHRoZSBpdGVtcyB3aXRoIHRoZSBnaXZlbiBnZW5yZS5cbiAgICovXG4gIGFic3RyYWN0IHNlYXJjaEJ5R2VucmUoZ2VucmU6IHN0cmluZyk6IFRbXTtcbn1cbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfbGdtejZkbGRqIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiQmFzaWNTdHJlYW1hYmxlQ29sbGVjdGlvbiIsIml0ZW1zIiwiY29uc3RydWN0b3IiLCJiIiwiZiIsImdldEFsbCIsImFkZCIsIml0ZW0iLCJwdXNoIiwicmVtb3ZlIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi9ob21lL3VzdWFyaW8vUDYvc3JjL2VqZXJjaWNpby0xL0Jhc2ljU3RyZWFtYWJsZUNvbGxlY3Rpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RyZWFtYWJsZSB9IGZyb20gXCIuLi9lamVyY2ljaW8tMS9pbnRlcmZhY2VzXCI7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGJhc2ljIGltcGxlbWVudGF0aW9uIG9mIGEgc3RyZWFtYWJsZSBjb2xsZWN0aW9uIG9mIGl0ZW1zLlxuICogQHR5cGVwYXJhbSBUIFRoZSB0eXBlIG9mIGl0ZW1zIGNvbnRhaW5lZCBpbiB0aGUgY29sbGVjdGlvbi5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2ljU3RyZWFtYWJsZUNvbGxlY3Rpb248VD4gaW1wbGVtZW50cyBTdHJlYW1hYmxlPFQ+IHtcbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIGl0ZW1zIGNvbnRhaW5lZCBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICovXG4gIHByb3RlY3RlZCBpdGVtczogVFtdO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBgQmFzaWNTdHJlYW1hYmxlQ29sbGVjdGlvbmAgY2xhc3MuXG4gICAqIEBwYXJhbSBpdGVtcyBBbiBhcnJheSBvZiBpdGVtcyB0byBpbml0aWFsaXplIHRoZSBjb2xsZWN0aW9uIHdpdGguIERlZmF1bHRzIHRvIGFuIGVtcHR5IGFycmF5LlxuICAgKi9cbiAgY29uc3RydWN0b3IoaXRlbXM6IFRbXSA9IFtdKSB7XG4gICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYWxsIHRoZSBpdGVtcyBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICogQHJldHVybnMgQW4gYXJyYXkgY29udGFpbmluZyBhbGwgdGhlIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uLlxuICAgKi9cbiAgZ2V0QWxsKCk6IFRbXSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXM7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBpdGVtIHRvIHRoZSBjb2xsZWN0aW9uLlxuICAgKiBAcGFyYW0gaXRlbSBUaGUgaXRlbSB0byBhZGQgdG8gdGhlIGNvbGxlY3Rpb24uXG4gICAqL1xuICBhZGQoaXRlbTogVCk6IHZvaWQge1xuICAgIHRoaXMuaXRlbXMucHVzaChpdGVtKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFuIGl0ZW0gZnJvbSB0aGUgY29sbGVjdGlvbi5cbiAgICogQHBhcmFtIGl0ZW0gVGhlIGl0ZW0gdG8gcmVtb3ZlIGZyb20gdGhlIGNvbGxlY3Rpb24uXG4gICAqL1xuICByZW1vdmUoaXRlbTogVCk6IHZvaWQge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5pdGVtcy5pbmRleE9mKGl0ZW0pO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2VhcmNoZXMgdGhlIGNvbGxlY3Rpb24gZm9yIGl0ZW1zIHB1Ymxpc2hlZCBpbiBhIGdpdmVuIHllYXIuXG4gICAqIEBwYXJhbSB5ZWFyIFRoZSB5ZWFyIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIEFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIHRoZSBpdGVtcyBwdWJsaXNoZWQgaW4gdGhlIGdpdmVuIHllYXIuXG4gICAqL1xuICBhYnN0cmFjdCBzZWFyY2hCeVllYXIoeWVhcjogbnVtYmVyKTogVFtdO1xuXG4gIC8qKlxuICAgKiBTZWFyY2hlcyB0aGUgY29sbGVjdGlvbiBmb3IgaXRlbXMgd2l0aCBhIGdpdmVuIG5hbWUuXG4gICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIEFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIHRoZSBpdGVtcyB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICAgKi9cbiAgYWJzdHJhY3Qgc2VhcmNoQnlOYW1lKG5hbWU6IHN0cmluZyk6IFRbXTtcblxuICAvKipcbiAgICogU2VhcmNoZXMgdGhlIGNvbGxlY3Rpb24gZm9yIGl0ZW1zIHdpdGggYSBnaXZlbiBnZW5yZS5cbiAgICogQHBhcmFtIGdlbnJlIFRoZSBnZW5yZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyBBbiBhcnJheSBjb250YWluaW5nIGFsbCB0aGUgaXRlbXMgd2l0aCB0aGUgZ2l2ZW4gZ2VucmUuXG4gICAqL1xuICBhYnN0cmFjdCBzZWFyY2hCeUdlbnJlKGdlbnJlOiBzdHJpbmcpOiBUW107XG59XG4iXSwibWFwcGluZ3MiOiJ5dEpBZUs7QUFBQUEsYUFBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxhQUFBLEdBQUFBLGFBQUEsR0FBQUUsQ0FBQSxNLHlIQWJMOzs7R0FJQSxLQUFzQixDQUFBQyx5QkFBeUIsQ0FDN0M7O09BR1VDLEtBQUssQ0FFZjs7O09BSUFDLFlBQVlELEtBQUEsRUFBQUosYUFBQSxHQUFBTSxDQUFBLFNBQWEsRUFBRSxHQUFBTixhQUFBLEdBQUFPLENBQUEsTUFBQVAsYUFBQSxHQUFBRSxDQUFBLE1BQ3pCLElBQUksQ0FBQ0UsS0FBSyxDQUFHQSxLQUFLLENBQ3BCLENBRUE7OztPQUlBSSxNQUFNQSxDQUFBLEVBQUFSLGFBQUEsR0FBQU8sQ0FBQSxNQUFBUCxhQUFBLEdBQUFFLENBQUEsTUFDSixNQUFPLEtBQUksQ0FBQ0UsS0FBSyxDQUNuQixDQUVBOzs7T0FJQUssR0FBR0EsQ0FBQ0MsSUFBTyxFQUFBVixhQUFBLEdBQUFPLENBQUEsTUFBQVAsYUFBQSxHQUFBRSxDQUFBLE1BQ1QsSUFBSSxDQUFDRSxLQUFLLENBQUNPLElBQUksQ0FBQ0QsSUFBSSxDQUFDLENBQ3ZCLENBRUE7OztPQUlBRSxNQUFNQSxDQUFDRixJQUFPLEVBQUFWLGFBQUEsR0FBQU8sQ0FBQSxNQUNaLEtBQU0sQ0FBQU0sS0FBSyxFQUFBYixhQUFBLEdBQUFFLENBQUEsTUFBRyxJQUFJLENBQUNFLEtBQUssQ0FBQ1UsT0FBTyxDQUFDSixJQUFJLENBQUMsRUFBQ1YsYUFBQSxHQUFBRSxDQUFBLE1BQ3ZDLEdBQUlXLEtBQUssR0FBSyxDQUFDLENBQUMsQ0FBRSxDQUFBYixhQUFBLEdBQUFNLENBQUEsU0FBQU4sYUFBQSxHQUFBRSxDQUFBLE1BQ2hCLElBQUksQ0FBQ0UsS0FBSyxDQUFDVyxNQUFNLENBQUNGLEtBQUssQ0FBRSxDQUFDLENBQUMsQyxDQUM1QixLQUFBYixhQUFBLEdBQUFNLENBQUEsVUFDSCxDLENBc0JETixhQUFBLEdBQUFFLENBQUEsTUE3RERjLE9BQUEsQ0FBQWIseUJBQUEsQ0FBQUEseUJBQUEsQyJ9