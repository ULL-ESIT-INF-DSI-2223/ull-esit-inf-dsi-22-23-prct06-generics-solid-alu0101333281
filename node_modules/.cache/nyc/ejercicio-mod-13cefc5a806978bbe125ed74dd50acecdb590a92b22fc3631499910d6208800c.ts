"use strict";function cov_jdxwglxnm(){var path="/home/usuario/P6/src/ejercicio-mod/ejercicio-mod.ts";var hash="5519a3f7957f4cbfa46ea64f6e21a911ff70ed07";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/usuario/P6/src/ejercicio-mod/ejercicio-mod.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:82}},"2":{start:{line:19,column:8},end:{line:19,column:24}},"3":{start:{line:26,column:8},end:{line:26,column:30}},"4":{start:{line:34,column:8},end:{line:36,column:9}},"5":{start:{line:35,column:12},end:{line:35,column:37}},"6":{start:{line:37,column:8},end:{line:37,column:25}},"7":{start:{line:45,column:8},end:{line:47,column:9}},"8":{start:{line:46,column:12},end:{line:46,column:50}},"9":{start:{line:48,column:8},end:{line:48,column:25}},"10":{start:{line:55,column:8},end:{line:55,column:33}},"11":{start:{line:69,column:8},end:{line:69,column:58}},"12":{start:{line:69,column:43},end:{line:69,column:56}},"13":{start:{line:72,column:0},end:{line:72,column:66}},"14":{start:{line:84,column:8},end:{line:84,column:64}},"15":{start:{line:84,column:43},end:{line:84,column:62}},"16":{start:{line:87,column:0},end:{line:87,column:64}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:18},end:{line:20,column:5}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:25,column:4},end:{line:25,column:5}},loc:{start:{line:25,column:18},end:{line:27,column:5}},line:25},"2":{name:"(anonymous_2)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:19},end:{line:38,column:5}},line:33},"3":{name:"(anonymous_3)",decl:{start:{line:44,column:4},end:{line:44,column:5}},loc:{start:{line:44,column:22},end:{line:49,column:5}},line:44},"4":{name:"(anonymous_4)",decl:{start:{line:54,column:4},end:{line:54,column:5}},loc:{start:{line:54,column:23},end:{line:56,column:5}},line:54},"5":{name:"(anonymous_5)",decl:{start:{line:68,column:4},end:{line:68,column:5}},loc:{start:{line:68,column:17},end:{line:70,column:5}},line:68},"6":{name:"(anonymous_6)",decl:{start:{line:69,column:33},end:{line:69,column:34}},loc:{start:{line:69,column:43},end:{line:69,column:56}},line:69},"7":{name:"(anonymous_7)",decl:{start:{line:83,column:4},end:{line:83,column:5}},loc:{start:{line:83,column:17},end:{line:85,column:5}},line:83},"8":{name:"(anonymous_8)",decl:{start:{line:84,column:33},end:{line:84,column:34}},loc:{start:{line:84,column:43},end:{line:84,column:62}},line:84}},branchMap:{"0":{loc:{start:{line:34,column:8},end:{line:36,column:9}},type:"if",locations:[{start:{line:34,column:8},end:{line:36,column:9}},{start:{line:34,column:8},end:{line:36,column:9}}],line:34},"1":{loc:{start:{line:34,column:12},end:{line:34,column:51}},type:"binary-expr",locations:[{start:{line:34,column:12},end:{line:34,column:22}},{start:{line:34,column:26},end:{line:34,column:51}}],line:34},"2":{loc:{start:{line:45,column:8},end:{line:47,column:9}},type:"if",locations:[{start:{line:45,column:8},end:{line:47,column:9}},{start:{line:45,column:8},end:{line:47,column:9}}],line:45},"3":{loc:{start:{line:45,column:12},end:{line:45,column:51}},type:"binary-expr",locations:[{start:{line:45,column:12},end:{line:45,column:22}},{start:{line:45,column:26},end:{line:45,column:51}}],line:45}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},inputSourceMap:{version:3,file:"/home/usuario/P6/src/ejercicio-mod/ejercicio-mod.ts",sources:["/home/usuario/P6/src/ejercicio-mod/ejercicio-mod.ts"],names:[],mappings:";;;AAKA;;;;;GAKG;AACH,MAAe,oBAAoB;IAGjC;;OAEG;IACO,KAAK,CAAM;IAErB;;OAEG;IACH;QACE,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IAClB,CAAC;IAED;;;OAGG;IACH,OAAO,CAAC,IAAO;QACb,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,KAAa;QACnB,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YAC3C,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SAC1B;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACH,UAAU,CAAC,KAAa;QACtB,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YAC3C,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACvC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;OAGG;IACH,gBAAgB;QACd,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IAC3B,CAAC;CAQF;AAED;;;GAGG;AACH,MAAa,2BAA4B,SAAQ,oBAA4B;IAC3E;;;;OAIG;IACH,MAAM,CAAC,IAAY;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;IACpD,CAAC;CACF;AATD,kEASC;AAED;;;GAGG;AACH,MAAa,0BAA2B,SAAQ,oBAA4B;IAC1E;;;;OAIG;IACH,MAAM,CAAC,IAAY;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1D,CAAC;CACF;AATD,gEASC",sourcesContent:["import {\n  Collectable,\n  Searchable,\n} from \"../ejercicio-mod/ejercicio-mod-interfaces\";\n\n/**\n * Abstract class that implements the Collectable and Searchable interfaces.\n * It contains an array of items of type T and implements the necessary methods\n * to add, get, remove and count items, as well as an abstract method for searching\n * items of type T.\n */\nabstract class SearchableCollection<T>\n  implements Collectable<T>, Searchable<T>\n{\n  /**\n   * Array of items of type T.\n   */\n  protected items: T[];\n\n  /**\n   * Creates an instance of SearchableCollection and initializes the items array.\n   */\n  constructor() {\n    this.items = [];\n  }\n\n  /**\n   * Adds an item of type T to the items array.\n   * @param item The item of type T to add.\n   */\n  addItem(item: T): void {\n    this.items.push(item);\n  }\n\n  /**\n   * Gets the item of type T located at the specified index in the items array.\n   * @param index The index of the item to get.\n   * @returns The item of type T located at the specified index or undefined if the index is out of range.\n   */\n  getItem(index: number): T | undefined {\n    if (index >= 0 && index < this.items.length) {\n      return this.items[index];\n    }\n    return undefined;\n  }\n\n  /**\n   * Removes the item of type T located at the specified index in the items array.\n   * @param index The index of the item to remove.\n   * @returns The item of type T that was removed from the array or undefined if the index is out of range.\n   */\n  removeItem(index: number): T {\n    if (index >= 0 && index < this.items.length) {\n      return this.items.splice(index, 1)[0];\n    }\n    return undefined;\n  }\n\n  /**\n   * Gets the number of items of type T in the items array.\n   * @returns The number of items of type T in the items array.\n   */\n  getNumberOfItems(): number {\n    return this.items.length;\n  }\n\n  /**\n   * Abstract method for searching items of type T in the items array.\n   * @param term The search term of type T.\n   * @returns An array of items of type T that match the search term or undefined if no matches were found.\n   */\n  abstract search(term: T): T[] | undefined;\n}\n\n/**\n * Class that extends the SearchableCollection class and implements the search method for searching\n * for numbers in the items array.\n */\nexport class NumericSearchableCollection extends SearchableCollection<number> {\n  /**\n   * Searches for numbers in the items array that match the specified search term.\n   * @param term The search term of type number.\n   * @returns An array of numbers that match the search term or undefined if no matches were found.\n   */\n  search(term: number): number[] | undefined {\n    return this.items.filter((item) => item === term);\n  }\n}\n\n/**\n * Class that extends the SearchableCollection class and implements the search method for searching\n * for strings in the items array.\n */\nexport class StringSearchableCollection extends SearchableCollection<string> {\n  /**\n   * Searches for strings in the items array that contain the specified search term.\n   * @param term The search term of type string.\n   * @returns An array of strings that contain the search term or undefined if no matches were found.\n   */\n  search(term: string): string[] | undefined {\n    return this.items.filter((item) => item.includes(term));\n  }\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5519a3f7957f4cbfa46ea64f6e21a911ff70ed07"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_jdxwglxnm=function(){return actualCoverage;};}return actualCoverage;}cov_jdxwglxnm();cov_jdxwglxnm().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_jdxwglxnm().s[1]++;exports.StringSearchableCollection=exports.NumericSearchableCollection=void 0;/**
 * Abstract class that implements the Collectable and Searchable interfaces.
 * It contains an array of items of type T and implements the necessary methods
 * to add, get, remove and count items, as well as an abstract method for searching
 * items of type T.
 */class SearchableCollection{/**
     * Array of items of type T.
     */items;/**
     * Creates an instance of SearchableCollection and initializes the items array.
     */constructor(){cov_jdxwglxnm().f[0]++;cov_jdxwglxnm().s[2]++;this.items=[];}/**
     * Adds an item of type T to the items array.
     * @param item The item of type T to add.
     */addItem(item){cov_jdxwglxnm().f[1]++;cov_jdxwglxnm().s[3]++;this.items.push(item);}/**
     * Gets the item of type T located at the specified index in the items array.
     * @param index The index of the item to get.
     * @returns The item of type T located at the specified index or undefined if the index is out of range.
     */getItem(index){cov_jdxwglxnm().f[2]++;cov_jdxwglxnm().s[4]++;if((cov_jdxwglxnm().b[1][0]++,index>=0)&&(cov_jdxwglxnm().b[1][1]++,index<this.items.length)){cov_jdxwglxnm().b[0][0]++;cov_jdxwglxnm().s[5]++;return this.items[index];}else{cov_jdxwglxnm().b[0][1]++;}cov_jdxwglxnm().s[6]++;return undefined;}/**
     * Removes the item of type T located at the specified index in the items array.
     * @param index The index of the item to remove.
     * @returns The item of type T that was removed from the array or undefined if the index is out of range.
     */removeItem(index){cov_jdxwglxnm().f[3]++;cov_jdxwglxnm().s[7]++;if((cov_jdxwglxnm().b[3][0]++,index>=0)&&(cov_jdxwglxnm().b[3][1]++,index<this.items.length)){cov_jdxwglxnm().b[2][0]++;cov_jdxwglxnm().s[8]++;return this.items.splice(index,1)[0];}else{cov_jdxwglxnm().b[2][1]++;}cov_jdxwglxnm().s[9]++;return undefined;}/**
     * Gets the number of items of type T in the items array.
     * @returns The number of items of type T in the items array.
     */getNumberOfItems(){cov_jdxwglxnm().f[4]++;cov_jdxwglxnm().s[10]++;return this.items.length;}}/**
 * Class that extends the SearchableCollection class and implements the search method for searching
 * for numbers in the items array.
 */class NumericSearchableCollection extends SearchableCollection{/**
     * Searches for numbers in the items array that match the specified search term.
     * @param term The search term of type number.
     * @returns An array of numbers that match the search term or undefined if no matches were found.
     */search(term){cov_jdxwglxnm().f[5]++;cov_jdxwglxnm().s[11]++;return this.items.filter(item=>{cov_jdxwglxnm().f[6]++;cov_jdxwglxnm().s[12]++;return item===term;});}}cov_jdxwglxnm().s[13]++;exports.NumericSearchableCollection=NumericSearchableCollection;/**
 * Class that extends the SearchableCollection class and implements the search method for searching
 * for strings in the items array.
 */class StringSearchableCollection extends SearchableCollection{/**
     * Searches for strings in the items array that contain the specified search term.
     * @param term The search term of type string.
     * @returns An array of strings that contain the search term or undefined if no matches were found.
     */search(term){cov_jdxwglxnm().f[7]++;cov_jdxwglxnm().s[14]++;return this.items.filter(item=>{cov_jdxwglxnm().f[8]++;cov_jdxwglxnm().s[15]++;return item.includes(term);});}}cov_jdxwglxnm().s[16]++;exports.StringSearchableCollection=StringSearchableCollection;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvdXN1YXJpby9QNi9zcmMvZWplcmNpY2lvLW1vZC9lamVyY2ljaW8tbW9kLnRzIiwic291cmNlcyI6WyIvaG9tZS91c3VhcmlvL1A2L3NyYy9lamVyY2ljaW8tbW9kL2VqZXJjaWNpby1tb2QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBS0E7Ozs7O0dBS0c7QUFDSCxNQUFlLG9CQUFvQjtJQUdqQzs7T0FFRztJQUNPLEtBQUssQ0FBTTtJQUVyQjs7T0FFRztJQUNIO1FBQ0UsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDbEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILE9BQU8sQ0FBQyxJQUFPO1FBQ2IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxPQUFPLENBQUMsS0FBYTtRQUNuQixJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQzNDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMxQjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsVUFBVSxDQUFDLEtBQWE7UUFDdEIsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUMzQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN2QztRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRDs7O09BR0c7SUFDSCxnQkFBZ0I7UUFDZCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQzNCLENBQUM7Q0FRRjtBQUVEOzs7R0FHRztBQUNILE1BQWEsMkJBQTRCLFNBQVEsb0JBQTRCO0lBQzNFOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsSUFBWTtRQUNqQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNGO0FBVEQsa0VBU0M7QUFFRDs7O0dBR0c7QUFDSCxNQUFhLDBCQUEyQixTQUFRLG9CQUE0QjtJQUMxRTs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLElBQVk7UUFDakIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7Q0FDRjtBQVRELGdFQVNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29sbGVjdGFibGUsXG4gIFNlYXJjaGFibGUsXG59IGZyb20gXCIuLi9lamVyY2ljaW8tbW9kL2VqZXJjaWNpby1tb2QtaW50ZXJmYWNlc1wiO1xuXG4vKipcbiAqIEFic3RyYWN0IGNsYXNzIHRoYXQgaW1wbGVtZW50cyB0aGUgQ29sbGVjdGFibGUgYW5kIFNlYXJjaGFibGUgaW50ZXJmYWNlcy5cbiAqIEl0IGNvbnRhaW5zIGFuIGFycmF5IG9mIGl0ZW1zIG9mIHR5cGUgVCBhbmQgaW1wbGVtZW50cyB0aGUgbmVjZXNzYXJ5IG1ldGhvZHNcbiAqIHRvIGFkZCwgZ2V0LCByZW1vdmUgYW5kIGNvdW50IGl0ZW1zLCBhcyB3ZWxsIGFzIGFuIGFic3RyYWN0IG1ldGhvZCBmb3Igc2VhcmNoaW5nXG4gKiBpdGVtcyBvZiB0eXBlIFQuXG4gKi9cbmFic3RyYWN0IGNsYXNzIFNlYXJjaGFibGVDb2xsZWN0aW9uPFQ+XG4gIGltcGxlbWVudHMgQ29sbGVjdGFibGU8VD4sIFNlYXJjaGFibGU8VD5cbntcbiAgLyoqXG4gICAqIEFycmF5IG9mIGl0ZW1zIG9mIHR5cGUgVC5cbiAgICovXG4gIHByb3RlY3RlZCBpdGVtczogVFtdO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFNlYXJjaGFibGVDb2xsZWN0aW9uIGFuZCBpbml0aWFsaXplcyB0aGUgaXRlbXMgYXJyYXkuXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLml0ZW1zID0gW107XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBpdGVtIG9mIHR5cGUgVCB0byB0aGUgaXRlbXMgYXJyYXkuXG4gICAqIEBwYXJhbSBpdGVtIFRoZSBpdGVtIG9mIHR5cGUgVCB0byBhZGQuXG4gICAqL1xuICBhZGRJdGVtKGl0ZW06IFQpOiB2b2lkIHtcbiAgICB0aGlzLml0ZW1zLnB1c2goaXRlbSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgaXRlbSBvZiB0eXBlIFQgbG9jYXRlZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4IGluIHRoZSBpdGVtcyBhcnJheS5cbiAgICogQHBhcmFtIGluZGV4IFRoZSBpbmRleCBvZiB0aGUgaXRlbSB0byBnZXQuXG4gICAqIEByZXR1cm5zIFRoZSBpdGVtIG9mIHR5cGUgVCBsb2NhdGVkIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXggb3IgdW5kZWZpbmVkIGlmIHRoZSBpbmRleCBpcyBvdXQgb2YgcmFuZ2UuXG4gICAqL1xuICBnZXRJdGVtKGluZGV4OiBudW1iZXIpOiBUIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pdGVtc1tpbmRleF07XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgaXRlbSBvZiB0eXBlIFQgbG9jYXRlZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4IGluIHRoZSBpdGVtcyBhcnJheS5cbiAgICogQHBhcmFtIGluZGV4IFRoZSBpbmRleCBvZiB0aGUgaXRlbSB0byByZW1vdmUuXG4gICAqIEByZXR1cm5zIFRoZSBpdGVtIG9mIHR5cGUgVCB0aGF0IHdhcyByZW1vdmVkIGZyb20gdGhlIGFycmF5IG9yIHVuZGVmaW5lZCBpZiB0aGUgaW5kZXggaXMgb3V0IG9mIHJhbmdlLlxuICAgKi9cbiAgcmVtb3ZlSXRlbShpbmRleDogbnVtYmVyKTogVCB7XG4gICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLml0ZW1zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuc3BsaWNlKGluZGV4LCAxKVswXTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgaXRlbXMgb2YgdHlwZSBUIGluIHRoZSBpdGVtcyBhcnJheS5cbiAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBpdGVtcyBvZiB0eXBlIFQgaW4gdGhlIGl0ZW1zIGFycmF5LlxuICAgKi9cbiAgZ2V0TnVtYmVyT2ZJdGVtcygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLml0ZW1zLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBYnN0cmFjdCBtZXRob2QgZm9yIHNlYXJjaGluZyBpdGVtcyBvZiB0eXBlIFQgaW4gdGhlIGl0ZW1zIGFycmF5LlxuICAgKiBAcGFyYW0gdGVybSBUaGUgc2VhcmNoIHRlcm0gb2YgdHlwZSBULlxuICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiBpdGVtcyBvZiB0eXBlIFQgdGhhdCBtYXRjaCB0aGUgc2VhcmNoIHRlcm0gb3IgdW5kZWZpbmVkIGlmIG5vIG1hdGNoZXMgd2VyZSBmb3VuZC5cbiAgICovXG4gIGFic3RyYWN0IHNlYXJjaCh0ZXJtOiBUKTogVFtdIHwgdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENsYXNzIHRoYXQgZXh0ZW5kcyB0aGUgU2VhcmNoYWJsZUNvbGxlY3Rpb24gY2xhc3MgYW5kIGltcGxlbWVudHMgdGhlIHNlYXJjaCBtZXRob2QgZm9yIHNlYXJjaGluZ1xuICogZm9yIG51bWJlcnMgaW4gdGhlIGl0ZW1zIGFycmF5LlxuICovXG5leHBvcnQgY2xhc3MgTnVtZXJpY1NlYXJjaGFibGVDb2xsZWN0aW9uIGV4dGVuZHMgU2VhcmNoYWJsZUNvbGxlY3Rpb248bnVtYmVyPiB7XG4gIC8qKlxuICAgKiBTZWFyY2hlcyBmb3IgbnVtYmVycyBpbiB0aGUgaXRlbXMgYXJyYXkgdGhhdCBtYXRjaCB0aGUgc3BlY2lmaWVkIHNlYXJjaCB0ZXJtLlxuICAgKiBAcGFyYW0gdGVybSBUaGUgc2VhcmNoIHRlcm0gb2YgdHlwZSBudW1iZXIuXG4gICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIG51bWJlcnMgdGhhdCBtYXRjaCB0aGUgc2VhcmNoIHRlcm0gb3IgdW5kZWZpbmVkIGlmIG5vIG1hdGNoZXMgd2VyZSBmb3VuZC5cbiAgICovXG4gIHNlYXJjaCh0ZXJtOiBudW1iZXIpOiBudW1iZXJbXSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMuZmlsdGVyKChpdGVtKSA9PiBpdGVtID09PSB0ZXJtKTtcbiAgfVxufVxuXG4vKipcbiAqIENsYXNzIHRoYXQgZXh0ZW5kcyB0aGUgU2VhcmNoYWJsZUNvbGxlY3Rpb24gY2xhc3MgYW5kIGltcGxlbWVudHMgdGhlIHNlYXJjaCBtZXRob2QgZm9yIHNlYXJjaGluZ1xuICogZm9yIHN0cmluZ3MgaW4gdGhlIGl0ZW1zIGFycmF5LlxuICovXG5leHBvcnQgY2xhc3MgU3RyaW5nU2VhcmNoYWJsZUNvbGxlY3Rpb24gZXh0ZW5kcyBTZWFyY2hhYmxlQ29sbGVjdGlvbjxzdHJpbmc+IHtcbiAgLyoqXG4gICAqIFNlYXJjaGVzIGZvciBzdHJpbmdzIGluIHRoZSBpdGVtcyBhcnJheSB0aGF0IGNvbnRhaW4gdGhlIHNwZWNpZmllZCBzZWFyY2ggdGVybS5cbiAgICogQHBhcmFtIHRlcm0gVGhlIHNlYXJjaCB0ZXJtIG9mIHR5cGUgc3RyaW5nLlxuICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiBzdHJpbmdzIHRoYXQgY29udGFpbiB0aGUgc2VhcmNoIHRlcm0gb3IgdW5kZWZpbmVkIGlmIG5vIG1hdGNoZXMgd2VyZSBmb3VuZC5cbiAgICovXG4gIHNlYXJjaCh0ZXJtOiBzdHJpbmcpOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMuZmlsdGVyKChpdGVtKSA9PiBpdGVtLmluY2x1ZGVzKHRlcm0pKTtcbiAgfVxufVxuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTZWFyY2hhYmxlQ29sbGVjdGlvbiIsIml0ZW1zIiwiY29uc3RydWN0b3IiLCJjb3ZfamR4d2dseG5tIiwiZiIsInMiLCJhZGRJdGVtIiwiaXRlbSIsInB1c2giLCJnZXRJdGVtIiwiaW5kZXgiLCJiIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwicmVtb3ZlSXRlbSIsInNwbGljZSIsImdldE51bWJlck9mSXRlbXMiLCJOdW1lcmljU2VhcmNoYWJsZUNvbGxlY3Rpb24iLCJzZWFyY2giLCJ0ZXJtIiwiZmlsdGVyIiwiZXhwb3J0cyIsIlN0cmluZ1NlYXJjaGFibGVDb2xsZWN0aW9uIiwiaW5jbHVkZXMiXSwic291cmNlcyI6WyIvaG9tZS91c3VhcmlvL1A2L3NyYy9lamVyY2ljaW8tbW9kL2VqZXJjaWNpby1tb2QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29sbGVjdGFibGUsXG4gIFNlYXJjaGFibGUsXG59IGZyb20gXCIuLi9lamVyY2ljaW8tbW9kL2VqZXJjaWNpby1tb2QtaW50ZXJmYWNlc1wiO1xuXG4vKipcbiAqIEFic3RyYWN0IGNsYXNzIHRoYXQgaW1wbGVtZW50cyB0aGUgQ29sbGVjdGFibGUgYW5kIFNlYXJjaGFibGUgaW50ZXJmYWNlcy5cbiAqIEl0IGNvbnRhaW5zIGFuIGFycmF5IG9mIGl0ZW1zIG9mIHR5cGUgVCBhbmQgaW1wbGVtZW50cyB0aGUgbmVjZXNzYXJ5IG1ldGhvZHNcbiAqIHRvIGFkZCwgZ2V0LCByZW1vdmUgYW5kIGNvdW50IGl0ZW1zLCBhcyB3ZWxsIGFzIGFuIGFic3RyYWN0IG1ldGhvZCBmb3Igc2VhcmNoaW5nXG4gKiBpdGVtcyBvZiB0eXBlIFQuXG4gKi9cbmFic3RyYWN0IGNsYXNzIFNlYXJjaGFibGVDb2xsZWN0aW9uPFQ+XG4gIGltcGxlbWVudHMgQ29sbGVjdGFibGU8VD4sIFNlYXJjaGFibGU8VD5cbntcbiAgLyoqXG4gICAqIEFycmF5IG9mIGl0ZW1zIG9mIHR5cGUgVC5cbiAgICovXG4gIHByb3RlY3RlZCBpdGVtczogVFtdO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFNlYXJjaGFibGVDb2xsZWN0aW9uIGFuZCBpbml0aWFsaXplcyB0aGUgaXRlbXMgYXJyYXkuXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLml0ZW1zID0gW107XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBpdGVtIG9mIHR5cGUgVCB0byB0aGUgaXRlbXMgYXJyYXkuXG4gICAqIEBwYXJhbSBpdGVtIFRoZSBpdGVtIG9mIHR5cGUgVCB0byBhZGQuXG4gICAqL1xuICBhZGRJdGVtKGl0ZW06IFQpOiB2b2lkIHtcbiAgICB0aGlzLml0ZW1zLnB1c2goaXRlbSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgaXRlbSBvZiB0eXBlIFQgbG9jYXRlZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4IGluIHRoZSBpdGVtcyBhcnJheS5cbiAgICogQHBhcmFtIGluZGV4IFRoZSBpbmRleCBvZiB0aGUgaXRlbSB0byBnZXQuXG4gICAqIEByZXR1cm5zIFRoZSBpdGVtIG9mIHR5cGUgVCBsb2NhdGVkIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXggb3IgdW5kZWZpbmVkIGlmIHRoZSBpbmRleCBpcyBvdXQgb2YgcmFuZ2UuXG4gICAqL1xuICBnZXRJdGVtKGluZGV4OiBudW1iZXIpOiBUIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pdGVtc1tpbmRleF07XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgaXRlbSBvZiB0eXBlIFQgbG9jYXRlZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4IGluIHRoZSBpdGVtcyBhcnJheS5cbiAgICogQHBhcmFtIGluZGV4IFRoZSBpbmRleCBvZiB0aGUgaXRlbSB0byByZW1vdmUuXG4gICAqIEByZXR1cm5zIFRoZSBpdGVtIG9mIHR5cGUgVCB0aGF0IHdhcyByZW1vdmVkIGZyb20gdGhlIGFycmF5IG9yIHVuZGVmaW5lZCBpZiB0aGUgaW5kZXggaXMgb3V0IG9mIHJhbmdlLlxuICAgKi9cbiAgcmVtb3ZlSXRlbShpbmRleDogbnVtYmVyKTogVCB7XG4gICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLml0ZW1zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuc3BsaWNlKGluZGV4LCAxKVswXTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgaXRlbXMgb2YgdHlwZSBUIGluIHRoZSBpdGVtcyBhcnJheS5cbiAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBpdGVtcyBvZiB0eXBlIFQgaW4gdGhlIGl0ZW1zIGFycmF5LlxuICAgKi9cbiAgZ2V0TnVtYmVyT2ZJdGVtcygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLml0ZW1zLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBYnN0cmFjdCBtZXRob2QgZm9yIHNlYXJjaGluZyBpdGVtcyBvZiB0eXBlIFQgaW4gdGhlIGl0ZW1zIGFycmF5LlxuICAgKiBAcGFyYW0gdGVybSBUaGUgc2VhcmNoIHRlcm0gb2YgdHlwZSBULlxuICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiBpdGVtcyBvZiB0eXBlIFQgdGhhdCBtYXRjaCB0aGUgc2VhcmNoIHRlcm0gb3IgdW5kZWZpbmVkIGlmIG5vIG1hdGNoZXMgd2VyZSBmb3VuZC5cbiAgICovXG4gIGFic3RyYWN0IHNlYXJjaCh0ZXJtOiBUKTogVFtdIHwgdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENsYXNzIHRoYXQgZXh0ZW5kcyB0aGUgU2VhcmNoYWJsZUNvbGxlY3Rpb24gY2xhc3MgYW5kIGltcGxlbWVudHMgdGhlIHNlYXJjaCBtZXRob2QgZm9yIHNlYXJjaGluZ1xuICogZm9yIG51bWJlcnMgaW4gdGhlIGl0ZW1zIGFycmF5LlxuICovXG5leHBvcnQgY2xhc3MgTnVtZXJpY1NlYXJjaGFibGVDb2xsZWN0aW9uIGV4dGVuZHMgU2VhcmNoYWJsZUNvbGxlY3Rpb248bnVtYmVyPiB7XG4gIC8qKlxuICAgKiBTZWFyY2hlcyBmb3IgbnVtYmVycyBpbiB0aGUgaXRlbXMgYXJyYXkgdGhhdCBtYXRjaCB0aGUgc3BlY2lmaWVkIHNlYXJjaCB0ZXJtLlxuICAgKiBAcGFyYW0gdGVybSBUaGUgc2VhcmNoIHRlcm0gb2YgdHlwZSBudW1iZXIuXG4gICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIG51bWJlcnMgdGhhdCBtYXRjaCB0aGUgc2VhcmNoIHRlcm0gb3IgdW5kZWZpbmVkIGlmIG5vIG1hdGNoZXMgd2VyZSBmb3VuZC5cbiAgICovXG4gIHNlYXJjaCh0ZXJtOiBudW1iZXIpOiBudW1iZXJbXSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMuZmlsdGVyKChpdGVtKSA9PiBpdGVtID09PSB0ZXJtKTtcbiAgfVxufVxuXG4vKipcbiAqIENsYXNzIHRoYXQgZXh0ZW5kcyB0aGUgU2VhcmNoYWJsZUNvbGxlY3Rpb24gY2xhc3MgYW5kIGltcGxlbWVudHMgdGhlIHNlYXJjaCBtZXRob2QgZm9yIHNlYXJjaGluZ1xuICogZm9yIHN0cmluZ3MgaW4gdGhlIGl0ZW1zIGFycmF5LlxuICovXG5leHBvcnQgY2xhc3MgU3RyaW5nU2VhcmNoYWJsZUNvbGxlY3Rpb24gZXh0ZW5kcyBTZWFyY2hhYmxlQ29sbGVjdGlvbjxzdHJpbmc+IHtcbiAgLyoqXG4gICAqIFNlYXJjaGVzIGZvciBzdHJpbmdzIGluIHRoZSBpdGVtcyBhcnJheSB0aGF0IGNvbnRhaW4gdGhlIHNwZWNpZmllZCBzZWFyY2ggdGVybS5cbiAgICogQHBhcmFtIHRlcm0gVGhlIHNlYXJjaCB0ZXJtIG9mIHR5cGUgc3RyaW5nLlxuICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiBzdHJpbmdzIHRoYXQgY29udGFpbiB0aGUgc2VhcmNoIHRlcm0gb3IgdW5kZWZpbmVkIGlmIG5vIG1hdGNoZXMgd2VyZSBmb3VuZC5cbiAgICovXG4gIHNlYXJjaCh0ZXJtOiBzdHJpbmcpOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMuZmlsdGVyKChpdGVtKSA9PiBpdGVtLmluY2x1ZGVzKHRlcm0pKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzhRQUtBOzs7OztHQU1BLEtBQWUsQ0FBQUEsb0JBQW9CLENBR2pDOztPQUdVQyxLQUFLLENBRWY7O09BR0FDLFlBQUEsRUFBQUMsYUFBQSxHQUFBQyxDQUFBLE1BQUFELGFBQUEsR0FBQUUsQ0FBQSxNQUNFLElBQUksQ0FBQ0osS0FBSyxDQUFHLEVBQUUsQ0FDakIsQ0FFQTs7O09BSUFLLE9BQU9BLENBQUNDLElBQU8sRUFBQUosYUFBQSxHQUFBQyxDQUFBLE1BQUFELGFBQUEsR0FBQUUsQ0FBQSxNQUNiLElBQUksQ0FBQ0osS0FBSyxDQUFDTyxJQUFJLENBQUNELElBQUksQ0FBQyxDQUN2QixDQUVBOzs7O09BS0FFLE9BQU9BLENBQUNDLEtBQWEsRUFBQVAsYUFBQSxHQUFBQyxDQUFBLE1BQUFELGFBQUEsR0FBQUUsQ0FBQSxNQUNuQixHQUFJLENBQUFGLGFBQUEsR0FBQVEsQ0FBQSxTQUFBRCxLQUFLLEVBQUksQ0FBQyxJQUFBUCxhQUFBLEdBQUFRLENBQUEsU0FBSUQsS0FBSyxDQUFHLElBQUksQ0FBQ1QsS0FBSyxDQUFDVyxNQUFNLEVBQUUsQ0FBQVQsYUFBQSxHQUFBUSxDQUFBLFNBQUFSLGFBQUEsR0FBQUUsQ0FBQSxNQUMzQyxNQUFPLEtBQUksQ0FBQ0osS0FBSyxDQUFDUyxLQUFLLENBQUMsQyxDQUN6QixLQUFBUCxhQUFBLEdBQUFRLENBQUEsVUFBQVIsYUFBQSxHQUFBRSxDQUFBLE1BQ0QsTUFBTyxDQUFBUSxTQUFTLENBQ2xCLENBRUE7Ozs7T0FLQUMsVUFBVUEsQ0FBQ0osS0FBYSxFQUFBUCxhQUFBLEdBQUFDLENBQUEsTUFBQUQsYUFBQSxHQUFBRSxDQUFBLE1BQ3RCLEdBQUksQ0FBQUYsYUFBQSxHQUFBUSxDQUFBLFNBQUFELEtBQUssRUFBSSxDQUFDLElBQUFQLGFBQUEsR0FBQVEsQ0FBQSxTQUFJRCxLQUFLLENBQUcsSUFBSSxDQUFDVCxLQUFLLENBQUNXLE1BQU0sRUFBRSxDQUFBVCxhQUFBLEdBQUFRLENBQUEsU0FBQVIsYUFBQSxHQUFBRSxDQUFBLE1BQzNDLE1BQU8sS0FBSSxDQUFDSixLQUFLLENBQUNjLE1BQU0sQ0FBQ0wsS0FBSyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDLENBQ3RDLEtBQUFQLGFBQUEsR0FBQVEsQ0FBQSxVQUFBUixhQUFBLEdBQUFFLENBQUEsTUFDRCxNQUFPLENBQUFRLFNBQVMsQ0FDbEIsQ0FFQTs7O09BSUFHLGdCQUFnQkEsQ0FBQSxFQUFBYixhQUFBLEdBQUFDLENBQUEsTUFBQUQsYUFBQSxHQUFBRSxDQUFBLE9BQ2QsTUFBTyxLQUFJLENBQUNKLEtBQUssQ0FBQ1csTUFBTSxDQUMxQixDLENBVUY7OztHQUlBLEtBQWEsQ0FBQUssMkJBQTRCLFFBQVEsQ0FBQWpCLG9CQUE0QixDQUMzRTs7OztPQUtBa0IsTUFBTUEsQ0FBQ0MsSUFBWSxFQUFBaEIsYUFBQSxHQUFBQyxDQUFBLE1BQUFELGFBQUEsR0FBQUUsQ0FBQSxPQUNqQixNQUFPLEtBQUksQ0FBQ0osS0FBSyxDQUFDbUIsTUFBTSxDQUFFYixJQUFJLEVBQUssQ0FBQUosYUFBQSxHQUFBQyxDQUFBLE1BQUFELGFBQUEsR0FBQUUsQ0FBQSxjQUFBRSxJQUFJLEdBQUtZLElBQUksQ0FBSixDQUFJLENBQUMsQ0FDbkQsQyxDQUNEaEIsYUFBQSxHQUFBRSxDQUFBLE9BVERnQixPQUFBLENBQUFKLDJCQUFBLENBQUFBLDJCQUFBLENBV0E7OztHQUlBLEtBQWEsQ0FBQUssMEJBQTJCLFFBQVEsQ0FBQXRCLG9CQUE0QixDQUMxRTs7OztPQUtBa0IsTUFBTUEsQ0FBQ0MsSUFBWSxFQUFBaEIsYUFBQSxHQUFBQyxDQUFBLE1BQUFELGFBQUEsR0FBQUUsQ0FBQSxPQUNqQixNQUFPLEtBQUksQ0FBQ0osS0FBSyxDQUFDbUIsTUFBTSxDQUFFYixJQUFJLEVBQUssQ0FBQUosYUFBQSxHQUFBQyxDQUFBLE1BQUFELGFBQUEsR0FBQUUsQ0FBQSxjQUFBRSxJQUFJLENBQUNnQixRQUFRLENBQUNKLElBQUksQ0FBQyxDQUFELENBQUMsQ0FBQyxDQUN6RCxDLENBQ0RoQixhQUFBLEdBQUFFLENBQUEsT0FURGdCLE9BQUEsQ0FBQUMsMEJBQUEsQ0FBQUEsMEJBQUEsQyJ9