{"version":3,"file":"/home/usuario/P6/src/ejercicio-2/list.ts","sources":["/home/usuario/P6/src/ejercicio-2/list.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACH,MAAa,IAAI;IACP,QAAQ,CAAM;IACtB;;;;OAIG;IACH,YAAY,QAAc;QACxB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3C,CAAC;IACD;;;;OAIG;IACI,MAAM,CAAC,IAAa;QACzB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACxC,CAAC;IACD;;;;;OAKG;IACI,WAAW,CAAC,GAAG,KAAgB;QACpC,MAAM,YAAY,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAC9C,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAC3B;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;IACD;;;;;OAKG;IACI,MAAM,CAAC,SAAkC;QAC9C,MAAM,QAAQ,GAAG,IAAI,IAAI,EAAK,CAAC;QAC/B,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnC,IAAI,SAAS,CAAC,OAAO,CAAC,EAAE;gBACtB,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aACvB;SACF;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACI,MAAM;QACX,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;IAC9B,CAAC;IACD;;;;;OAKG;IACI,GAAG,CAAI,SAA4B;QACxC,MAAM,MAAM,GAAG,IAAI,IAAI,EAAK,CAAC;QAC7B,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;SAChC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IACD;;;;;;OAMG;IACI,MAAM,CACX,OAA0C,EAC1C,kBAAqB;QAErB,IAAI,WAAW,GAAG,kBAAkB,CAAC;QACrC,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnC,WAAW,GAAG,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;SAC7C;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACI,OAAO;QACZ,MAAM,QAAQ,GAAG,IAAI,IAAI,EAAK,CAAC;QAC/B,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YAC3C,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SAChC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEM,OAAO,CAAC,SAA+B;QAC5C,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnC,SAAS,CAAC,OAAO,CAAC,CAAC;SACpB;IACH,CAAC;IAEM,GAAG,CAAC,OAAU;QACnB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IAC/B,CAAC;CACF;AAhHD,oBAgHC","sourcesContent":["/**\n * List is a generic class that represents a collection of elements of type T.\n */\nexport class List<T> {\n  private elements: T[];\n  /**\n   * Creates a new List object.\n   *\n   * @param elements An array of elements to initialize the list. If not provided, the list will be empty.\n   */\n  constructor(elements?: T[]) {\n    this.elements = elements ? elements : [];\n  }\n  /**\n   * Appends the elements of the given list to the end of this list.\n   *\n   * @param list The list whose elements should be appended to this list.\n   */\n  public append(list: List<T>): void {\n    this.elements.push(...list.toArray());\n  }\n  /**\n   * Concatenates the elements of this list with the elements of the given lists, returning a new list containing all the elements.\n   *\n   * @param lists The lists to concatenate with this list.\n   * @returns A new List object containing all the elements of this list and the given lists.\n   */\n  public concatenate(...lists: List<T>[]): List<T> {\n    const concatenated = new List(this.toArray());\n    for (const list of lists) {\n      concatenated.append(list);\n    }\n    return concatenated;\n  }\n  /**\n   * Returns a new list containing the elements of this list that satisfy the given predicate.\n   *\n   * @param predicate A function that returns true for elements that should be included in the filtered list.\n   * @returns A new List object containing the elements that satisfy the predicate.\n   */\n  public filter(predicate: (element: T) => boolean): List<T> {\n    const filtered = new List<T>();\n    for (const element of this.elements) {\n      if (predicate(element)) {\n        filtered.add(element);\n      }\n    }\n    return filtered;\n  }\n\n  /**\n   * Returns the number of elements in the list.\n   *\n   * @returns The number of elements in the list.\n   */\n  public length(): number {\n    return this.elements.length;\n  }\n  /**\n   * Returns a new list containing the result of applying the given transform function to each element in this list.\n   *\n   * @param transform A function that maps elements of type T to elements of type U.\n   * @returns A new List object containing the transformed elements.\n   */\n  public map<U>(transform: (element: T) => U): List<U> {\n    const mapped = new List<U>();\n    for (const element of this.elements) {\n      mapped.add(transform(element));\n    }\n    return mapped;\n  }\n  /**\n   * Applies the given reducer function to each element in the list to reduce the list to a single value.\n   *\n   * @param reducer A function that takes an accumulator of type U and an element of type T and returns a new accumulator.\n   * @param initialAccumulator The initial value of the accumulator.\n   * @returns The final value of the accumulator after applying the reducer to all elements of the list.\n   */\n  public reduce<U>(\n    reducer: (accumulator: U, current: T) => U,\n    initialAccumulator: U\n  ): U {\n    let accumulator = initialAccumulator;\n    for (const element of this.elements) {\n      accumulator = reducer(accumulator, element);\n    }\n    return accumulator;\n  }\n\n  /**\n   * Returns a new list containing the elements of this list in reverse order.\n   *\n   * @returns A new List object containing the reversed elements.\n   */\n  public reverse(): List<T> {\n    const reversed = new List<T>();\n    for (let i = this.length() - 1; i >= 0; i--) {\n      reversed.add(this.elements[i]);\n    }\n    return reversed;\n  }\n\n  public forEach(operation: (element: T) => void): void {\n    for (const element of this.elements) {\n      operation(element);\n    }\n  }\n\n  public add(element: T): void {\n    this.elements.push(element);\n  }\n\n  public toArray(): T[] {\n    return this.elements.slice();\n  }\n}\n"]}