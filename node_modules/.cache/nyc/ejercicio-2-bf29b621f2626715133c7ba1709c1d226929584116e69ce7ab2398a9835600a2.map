{"version":3,"file":"/home/usuario/P6/src/ejercicio-2.ts","sources":["/home/usuario/P6/src/ejercicio-2.ts"],"names":[],"mappings":";;;AAAA,MAAa,IAAI;IACP,QAAQ,CAAM;IAEtB,YAAY,QAAc;QACxB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3C,CAAC;IAEM,MAAM,CAAC,IAAa;QACzB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACxC,CAAC;IAEM,WAAW,CAAC,GAAG,KAAgB;QACpC,MAAM,YAAY,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAC9C,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAC3B;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;IAEM,MAAM,CAAC,SAAkC;QAC9C,MAAM,QAAQ,GAAG,IAAI,IAAI,EAAK,CAAC;QAC/B,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnC,IAAI,SAAS,CAAC,OAAO,CAAC,EAAE;gBACtB,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aACvB;SACF;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;IAC9B,CAAC;IAEM,GAAG,CAAI,SAA4B;QACxC,MAAM,MAAM,GAAG,IAAI,IAAI,EAAK,CAAC;QAC7B,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;SAChC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAEM,MAAM,CAAI,OAA0C,EAAE,kBAAqB;QAChF,IAAI,WAAW,GAAG,kBAAkB,CAAC;QACrC,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnC,WAAW,GAAG,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;SAC7C;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;IAEM,OAAO;QACZ,MAAM,QAAQ,GAAG,IAAI,IAAI,EAAK,CAAC;QAC/B,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YAC3C,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SAChC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEM,OAAO,CAAC,SAA+B;QAC5C,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnC,SAAS,CAAC,OAAO,CAAC,CAAC;SACpB;IACH,CAAC;IAEM,GAAG,CAAC,OAAU;QACnB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IAC/B,CAAC;CACF;AAtED,oBAsEC","sourcesContent":["export class List<T> {\n  private elements: T[];\n\n  constructor(elements?: T[]) {\n    this.elements = elements ? elements : [];\n  }\n\n  public append(list: List<T>): void {\n    this.elements.push(...list.toArray());\n  }\n\n  public concatenate(...lists: List<T>[]): List<T> {\n    const concatenated = new List(this.toArray());\n    for (const list of lists) {\n      concatenated.append(list);\n    }\n    return concatenated;\n  }\n\n  public filter(predicate: (element: T) => boolean): List<T> {\n    const filtered = new List<T>();\n    for (const element of this.elements) {\n      if (predicate(element)) {\n        filtered.add(element);\n      }\n    }\n    return filtered;\n  }\n\n  public length(): number {\n    return this.elements.length;\n  }\n\n  public map<U>(transform: (element: T) => U): List<U> {\n    const mapped = new List<U>();\n    for (const element of this.elements) {\n      mapped.add(transform(element));\n    }\n    return mapped;\n  }\n\n  public reduce<U>(reducer: (accumulator: U, current: T) => U, initialAccumulator: U): U {\n    let accumulator = initialAccumulator;\n    for (const element of this.elements) {\n      accumulator = reducer(accumulator, element);\n    }\n    return accumulator;\n  }\n\n  public reverse(): List<T> {\n    const reversed = new List<T>();\n    for (let i = this.length() - 1; i >= 0; i--) {\n      reversed.add(this.elements[i]);\n    }\n    return reversed;\n  }\n\n  public forEach(operation: (element: T) => void): void {\n    for (const element of this.elements) {\n      operation(element);\n    }\n  }\n\n  public add(element: T): void {\n    this.elements.push(element);\n  }\n\n  public toArray(): T[] {\n    return this.elements.slice();\n  }\n}\n"]}